import{Clock as e,PerspectiveCamera as t,Scene as i,WebGLRenderer as s,SRGBColorSpace as n,MathUtils as o,Vector2 as r,Vector3 as a,MeshPhysicalMaterial as c,ShaderChunk as h,Color as l,Object3D as m,InstancedMesh as d,SphereGeometry as p,PointLight as g,DirectionalLight as f,PCFSoftShadowMap as u,ACESFilmicToneMapping as v,PMREMGenerator as y,Raycaster as w,Plane as z,}from "https://cdn.jsdelivr.net/npm/three@0.170.0/+esm";import{RoomEnvironment as R}from "https://cdn.jsdelivr.net/npm/three@0.170.0/examples/jsm/environments/RoomEnvironment.js/+esm";class b{#e;canvas;camera;cameraMinAspect;cameraMaxAspect;cameraFov;maxPixelRatio;minPixelRatio;scene;renderer;#t;size={width:0,height:0,wWidth:0,wHeight:0,ratio:0,pixelRatio:0};render=this.#i;onBeforeRender=()=>{};onAfterRender=()=>{};onAfterResize=()=>{};#s=!1;#n=!1;isDisposed=!1;#o;#r;#a;#c=new e();#h={elapsed:0,delta:0};#l;constructor(e){(this.#e={...e}),this.#m(),this.#d(),this.#p(),this.resize(),this.#g()}
#m(){(this.camera=new t()),(this.cameraFov=this.camera.fov)}
#d(){this.scene=new i()}
#p(){this.#e.canvas?(this.canvas=this.#e.canvas):this.#e.id?(this.canvas=document.getElementById(this.#e.id)):console.error("Three: Missing canvas or id parameter"),(this.canvas.style.display="block");const e={canvas:this.canvas,powerPreference:"high-performance",...(this.#e.rendererOptions??{})};(this.renderer=new s(e)),(this.renderer.outputColorSpace=n)}
#g(){this.#e.size instanceof Object||(window.addEventListener("resize",this.#f.bind(this)),"parent"===this.#e.size&&((this.#r=new ResizeObserver(this.#f.bind(this))),this.#r.observe(this.canvas.parentNode))),(this.#o=new IntersectionObserver(this.#u.bind(this),{root:null,rootMargin:"0px",threshold:0})),this.#o.observe(this.canvas),document.addEventListener("visibilitychange",this.#v.bind(this))}
#y(){window.removeEventListener("resize",this.#f.bind(this)),this.#r?.disconnect(),this.#o?.disconnect(),document.removeEventListener("visibilitychange",this.#v.bind(this))}
#u(e){(this.#s=e[0].isIntersecting),this.#s?this.#w():this.#z()}
#v(e){this.#s&&(document.hidden?this.#z():this.#w())}
#f(){this.#a&&clearTimeout(this.#a),(this.#a=setTimeout(this.resize.bind(this),100))}
resize(){let e,t;this.#e.size instanceof Object?((e=this.#e.size.width),(t=this.#e.size.height)):"parent"===this.#e.size&&this.canvas.parentNode?((e=this.canvas.parentNode.offsetWidth),(t=this.canvas.parentNode.offsetHeight)):((e=window.innerWidth),(t=window.innerHeight)),(this.size.width=e),(this.size.height=t),(this.size.ratio=e/t),this.#R(),this.#b(),this.onAfterResize(this.size)}
#R(){(this.camera.aspect=this.size.width/this.size.height),this.camera.isPerspectiveCamera&&this.cameraFov&&(this.cameraMinAspect&&this.camera.aspect<this.cameraMinAspect?this.#A(this.cameraMinAspect):this.cameraMaxAspect&&this.camera.aspect>this.cameraMaxAspect?this.#A(this.cameraMaxAspect):(this.camera.fov=this.cameraFov)),this.camera.updateProjectionMatrix(),this.updateWorldSize()}
#A(e){const t=Math.tan(o.degToRad(this.cameraFov/2))/(this.camera.aspect/e);this.camera.fov=2*o.radToDeg(Math.atan(t))}
updateWorldSize(){if(this.camera.isPerspectiveCamera){const e=(this.camera.fov*Math.PI)/180;(this.size.wHeight=2*Math.tan(e/2)*this.camera.position.length()),(this.size.wWidth=this.size.wHeight*this.camera.aspect)}else this.camera.isOrthographicCamera&&((this.size.wHeight=this.camera.top-this.camera.bottom),(this.size.wWidth=this.camera.right-this.camera.left))}
#b(){this.renderer.setSize(this.size.width,this.size.height),this.#t?.setSize(this.size.width,this.size.height);let e=window.devicePixelRatio;this.maxPixelRatio&&e>this.maxPixelRatio?(e=this.maxPixelRatio):this.minPixelRatio&&e<this.minPixelRatio&&(e=this.minPixelRatio),this.renderer.setPixelRatio(e),(this.size.pixelRatio=e)}
get postprocessing(){return this.#t}
set postprocessing(e){this.#t=e}
#w(){if(this.#n)return;const e=()=>{(this.#l=requestAnimationFrame(e)),(this.#h.delta=this.#c.getDelta()),(this.#h.elapsed+=this.#h.delta),this.onBeforeRender(this.#h),this.render(),this.onAfterRender(this.#h)};(this.#n=!0),this.#c.start(),e()}
#z(){this.#n&&(cancelAnimationFrame(this.#l),(this.#n=!1),this.#c.stop())}
#i(){this.renderer.render(this.scene,this.camera)}
clear(){this.scene.traverse((e)=>{e.isMesh&&"object"==typeof e.material&&(Object.keys(e.material).forEach((t)=>{const i=e.material[t];null!==i&&"object"==typeof i&&"function"==typeof i.dispose&&i.dispose()}),e.material.dispose(),e.geometry.dispose())}),this.scene.clear()}
dispose(){this.#y(),this.#z(),this.clear(),this.renderer.dispose(),(this.isDisposed=!0)}}
const A=new Map(),x=new r();let L=!1;function M(e){const t={position:new r(),nPosition:new r(),hover:!1,onEnter(){},onMove(){},onClick(){},onLeave(){},...e};return((function(e,t){A.has(e)||(A.set(e,t),L||(document.body.addEventListener("pointermove",S),document.body.addEventListener("pointerleave",P),document.body.addEventListener("click",C),(L=!0)))})(e.domElement,t),(t.dispose=()=>{var t;(t=e.domElement),A.delete(t),0===A.size&&(document.body.removeEventListener("pointermove",S),document.body.removeEventListener("pointerleave",P),(L=!1))}),t)}
function S(e){(x.x=e.clientX),(x.y=e.clientY);for(const[e,t]of A){const i=e.getBoundingClientRect();k(i)?(D(t,i),t.hover||((t.hover=!0),t.onEnter(t)),t.onMove(t)):t.hover&&((t.hover=!1),t.onLeave(t))}}
function C(e){(x.x=e.clientX),(x.y=e.clientY);for(const[e,t]of A){const i=e.getBoundingClientRect();D(t,i),k(i)&&t.onClick(t)}}
function P(){for(const e of A.values())e.hover&&((e.hover=!1),e.onLeave(e))}
function D(e,t){const{position:i,nPosition:s}=e;(i.x=x.x-t.left),(i.y=x.y-t.top),(s.x=(i.x/t.width)*2-1),(s.y=(-i.y/t.height)*2+1)}
function k(e){const{x:t,y:i}=x,{left:s,top:n,width:o,height:r}=e;return t>=s&&t<=s+o&&i>=n&&i<=n+r}
const{randFloat:E,randFloatSpread:I}=o,F=new a(),O=new a(),V=new a(),N=new a(),j=new a(),_=new a(),W=new a(),H=new a(),T=new a();class B{constructor(e){(this.config=e),(this.positionData=new Float32Array(3*e.count).fill(0)),(this.velocityData=new Float32Array(3*e.count).fill(0)),(this.sizeData=new Float32Array(e.count).fill(1)),(this.center=new a()),this.randomPositions()}
randomPositions(){const{config:e,positionData:t,sizeData:i}=this;this.center.toArray(t,0),(i[0]=e.size0);for(let s=1;s<this.config.count;s++){const n=3*s;(t[n]=I(10)),(t[n+1]=I(10)),(t[n+2]=I(10)),(i[s]=E(e.minSize,e.maxSize))}}
update(e){const{config:t,center:i,positionData:s,sizeData:n,velocityData:o}=this;F.fromArray(s,0),F.lerp(i,0.1).toArray(s,0);for(let i=1;i<this.config.count;i++){const r=3*i;O.fromArray(s,r),N.fromArray(o,r);const a=n[i];_.copy(F).sub(O),N.add(_.normalize().multiplyScalar(e.delta*t.attraction*Math.max(0.5,a))),N.multiplyScalar(t.friction),N.clampLength(0,t.maxVelocity),O.add(N),O.toArray(s,r),N.toArray(o,r)}
for(let e=1;e<t.count;e++){const i=3*e;O.fromArray(s,i),N.fromArray(o,i);const r=n[e];for(let i=e+1;i<t.count;i++){const e=3*i;V.fromArray(s,e),j.fromArray(o,e);const t=n[i];_.copy(V).sub(O);const a=_.length(),c=r+t;if(a<c){const t=c-a;W.copy(_).normalize().multiplyScalar(0.5*t),H.copy(W).multiplyScalar(Math.max(N.length(),1)),T.copy(W).multiplyScalar(Math.max(j.length(),1)),O.sub(W),N.sub(H),V.add(W),j.add(T),V.toArray(s,e),j.toArray(o,e)}}
_.copy(F).sub(O);const a=_.length(),c=r+n[0];if(a<c){const e=c-a;W.copy(_).normalize().multiplyScalar(e),H.copy(W).multiplyScalar(Math.max(N.length(),2)),O.sub(W),N.sub(H)}
O.toArray(s,i),N.toArray(o,i)}}}
class U extends c{constructor(e){super(e);(this.uniforms={thicknessDistortion:{value:0.1},thicknessAmbient:{value:0},thicknessAttenuation:{value:0.1},thicknessPower:{value:2},thicknessScale:{value:10}}),(this.defines.USE_UV=""),(this.onBeforeCompile=(e)=>{Object.assign(e.uniforms,this.uniforms),(e.fragmentShader="\n        uniform float thicknessPower;\n        uniform float thicknessScale;\n        uniform float thicknessDistortion;\n        uniform float thicknessAmbient;\n        uniform float thicknessAttenuation;\n        uniform vec3 thicknessColor;\n      "+e.fragmentShader),(e.fragmentShader=e.fragmentShader.replace("void main() {","\n        void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, inout ReflectedLight reflectedLight) {\n          vec3 scatteringHalf = normalize(directLight.direction + (geometryNormal * thicknessDistortion));\n          float scatteringDot = pow(saturate(dot(geometryViewDir, -scatteringHalf)), thicknessPower) * thicknessScale;\n          vec3 scatteringIllu = (scatteringDot + thicknessAmbient) * vColor;\n          reflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;\n        }\n\n        void main() {\n      "));const t=h.lights_fragment_begin.replaceAll("RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );","\n          RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n          RE_Direct_Scattering(directLight, vUv, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, reflectedLight);\n        ");e.fragmentShader=e.fragmentShader.replace("#include <lights_fragment_begin>",t)})}}
const X={count:200,colors:[16711680,0,16777215],pointLightIntensity:150,directionalLightColor:16777215,directionalLightIntensity:5,materialParams:{metalness:0.5,roughness:0.5,clearcoat:1,clearcoatRoughness:0.15},minSize:0.25,maxSize:1,size0:3,attraction:0.15,friction:0.999,maxVelocity:0.15,},Y=new m();class q extends d{constructor(e,t={}){const i={...X,...t};super(new p(1,48,24),new U(i.materialParams),i.count),(this.castShadow=!0),(this.receiveShadow=!0),(this.config=i),(this.physics=new B(i)),this.initLights(),this.setColors(i.colors)}
initLights(){(this.pointLight=new g(this.config.colors[0],this.config.pointLightIntensity)),this.add(this.pointLight);const e=(this.directionalLight=new f(this.config.directionalLightColor,this.config.directionalLightIntensity));e.position.set(20,20,20),e.target.position.set(0,0,0),(e.castShadow=!0),(e.shadow.mapSize.width=2048),(e.shadow.mapSize.height=2048),(e.shadow.camera.far=70),(e.shadow.camera.left=-17.5),(e.shadow.camera.right=17.5),(e.shadow.camera.top=17.5),(e.shadow.camera.bottom=-17.5),this.add(e),this.add(e.target)}
setColors(e){if(Array.isArray(e)&&e.length>1){const t=(function(e){let t,i;return(s(e),{setColors:s,getColorAt:function(e,s=new l()){const n=Math.max(0,Math.min(1,e))*(t.length-1),o=Math.floor(n),r=i[o];if(o>=t.length-1)return r.clone();const a=n-o,c=i[o+1];return(s.r=r.r+a*(c.r-r.r)),(s.g=r.g+a*(c.g-r.g)),(s.b=r.b+a*(c.b-r.b)),s},});function s(e){(t=e),(i=[]),t.forEach((e)=>{const t=new l(e);i.push(t)})}})(e);for(let e=0;e<this.count;e++)this.setColorAt(e,t.getColorAt(e/this.count)),0===e&&this.pointLight.color.copy(t.getColorAt(e/this.count));this.instanceColor.needsUpdate=!0}}
update(e){this.physics.update(e);for(let e=0;e<this.count;e++)
Y.position.fromArray(this.physics.positionData,3*e),Y.scale.setScalar(this.physics.sizeData[e]),Y.updateMatrix(),this.setMatrixAt(e,Y.matrix),0===e&&this.pointLight.position.copy(Y.position);this.instanceMatrix.needsUpdate=!0}}
function G(e,t){const i=new b({canvas:e,size:"parent",rendererOptions:{antialias:!0,alpha:!0}});(i.cameraMaxAspect=1.5),i.camera.position.set(0,0,30),i.camera.lookAt(0,0,0),i.updateWorldSize(),(i.renderer.shadowMap.enabled=!0),(i.renderer.shadowMap.type=u),(i.renderer.toneMapping=v);const s=new R(),n=new y(i.renderer,0.04).fromScene(s).texture;let o;d(t);const r=new w(),c=new z(new a(0,0,1),0),h=new a();let l=!1;const m=M({domElement:e,onMove(){r.setFromCamera(m.nPosition,i.camera),i.camera.getWorldDirection(c.normal),r.ray.intersectPlane(c,h),o.physics.center.copy(h)},onLeave(){o.physics.center.set(0,0,0)},});function d(e){o&&(i.clear(),i.scene.remove(o)),(o=new q(i.renderer,e));const t=e.materialParams||{};void 0===t.envMap&&(o.material.envMap=n),void 0===t.envMapIntensity&&(o.material.envMapIntensity=0.25),(o.material.envMapRotation.x=-Math.PI/2),i.scene.add(o)}
return((i.onBeforeRender=(e)=>{l||o.update(e)}),(i.onAfterResize=(e)=>{(o.config.maxX=e.wWidth/2),(o.config.maxY=e.wHeight/2)}),{three:i,get spheres(){return o},setCount(e){d({...o.config,count:e})},togglePause(){l=!l},dispose(){i.dispose()},})}
export{G as default}