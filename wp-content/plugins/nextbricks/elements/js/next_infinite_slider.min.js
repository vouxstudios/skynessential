function next_infinite_slider(){document.querySelectorAll(".nb-infinite-slider").forEach(($menu)=>{$menu.removeAttribute("data-flickering");const $items=$menu.querySelectorAll('.nb-infinite-slider__item')
let menuWidth=$menu.clientWidth
let itemWidth=$items[0].clientWidth
let wrapWidth=$items.length*itemWidth
let scrollSpeed=0
let oldScrollY=0
let scrollY=0
let y=0
const lerp=(v0,v1,t)=>{return v0*(1-t)+v1*t}
const dispose=(scroll)=>{const gapString=getComputedStyle($menu).getPropertyValue('--gap')
const gap=parseFloat(gapString)*window.innerWidth/100
gsap.set($items,{x:(i)=>{return(i*(itemWidth+gap))+scroll},modifiers:{x:(x,target)=>{const wrapWidthWithGaps=wrapWidth+(gap*$items.length)
const s=gsap.utils.wrap(-(itemWidth+gap),wrapWidthWithGaps-(itemWidth+gap),parseFloat(x))
return `${s}px`}}})}
dispose(0)
const handleMouseWheel=(e)=>{scrollY-=e.deltaY*0.9}
let touchStart=0
let touchX=0
let isDragging=!1
const handleTouchStart=(e)=>{touchStart=e.clientX||e.touches[0].clientX
isDragging=!0
$menu.classList.add('nb-infinite-slider--is-dragging')}
const handleTouchMove=(e)=>{if(!isDragging)return
touchX=e.clientX||e.touches[0].clientX
scrollY+=(touchX-touchStart)*2.5
touchStart=touchX}
const handleTouchEnd=()=>{isDragging=!1
$menu.classList.remove('nb-infinite-slider--is-dragging')}
$menu.addEventListener('mousewheel',handleMouseWheel)
$menu.addEventListener('touchstart',handleTouchStart)
$menu.addEventListener('touchmove',handleTouchMove)
$menu.addEventListener('touchend',handleTouchEnd)
$menu.addEventListener('mousedown',handleTouchStart)
$menu.addEventListener('mousemove',handleTouchMove)
$menu.addEventListener('mouseleave',handleTouchEnd)
$menu.addEventListener('mouseup',handleTouchEnd)
$menu.addEventListener('selectstart',()=>{return!1})
window.addEventListener('resize',()=>{menuWidth=$menu.clientWidth
itemWidth=$items[0].clientWidth
wrapWidth=$items.length*itemWidth
dispose(y)})
const render=()=>{requestAnimationFrame(render)
y=lerp(y,scrollY,.1)
dispose(y)
scrollSpeed=y-oldScrollY
oldScrollY=y
gsap.to($items,{skewX:-scrollSpeed*.2,rotate:scrollSpeed*.01,scale:1-Math.min(100,Math.abs(scrollSpeed))*0.003})}
render()})}
document.addEventListener("DOMContentLoaded",function(t){bricksIsFrontend&&next_infinite_slider()})